alias zshconfig="vim ~/.zshrc"
alias vimconfig="vim ~/.vimrc"
alias ansibleconfig="vim ~/.ansible/ansible.cfg"
alias grep='grep --color=auto'
alias ls="gls -G"

alias rm="trash"
alias cp="cp -i"

alias v='nvim'
# alias vi='nvim'
export EDITOR='nvim'
alias vz="NVIM_APPNAME=nvim-lazyvim nvim"
alias vc="NVIM_APPNAME=nvim-nvchad nvim"
alias va="NVIM_APPNAME=nvim-astronvim nvim"
alias vl="NVIM_APPNAME=nvim-lunarvim nvim"
alias vk="NVIM_APPNAME=nvim-kickstart nvim"

#
# alias  kitten ssh
alias kssh='kitten ssh'


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Homebrew Bottle sources
# export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
# proxy
export http_proxy=127.0.0.1:8889;https_proxy=127.0.0.1:8889;sock_proxy=127.0.0.1:1089;

# Command completion
autoload -Uz compinit promptinit
autoload -U colors && colors  # Load colors
setopt globdots               # Glob Dotfiles As Well.
setopt extendedglob           # Use Extending Globbing.
setopt autocd                 # Automatically Change Directory If A Directory Entered.

# Smart URLs.
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

compinit
promptinit

# default prompt theme
prompt clint

# History search
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "${key[Up]}" ]] && bindkey -- "${key[Up]}" up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search



test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#
# export FZF_DEFAULT_OPTS='--height=40% --preview="cat {}" --preview-window=right:60%:wrap'


alias cat="pygmentize -P style=monokai -P tabsize=4 -f terminal256 -g"

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=/usr/local/sbin:$PATH
export PATH=$HOME/.yarn/bin:$PATH

# vv() {
#   select config in lazyvim kickstart nvchad astronvim lunarvim
#   do NVIM_APPNAME=nvim-$config nvim; break; done
# }

vv() {
  # Assume all configs exist in directories named ~/.config/nvim-*
  local config=$(fd --max-depth 1 --glob 'nvim-*' ~/.config | fzf --prompt="Neovim Configs > " --height=~50% --layout=reverse --border --exit-0)

  # If I exit fzf without selecting a config, don't open Neovim
  [[ -z $config ]] && echo "No config selected" && return

  # Open Neovim with the selected config
  NVIM_APPNAME=$(basename $config) nvim
}

#[ -f "/Users/derek/.ghcup/env" ] && source "/Users/derek/.ghcup/env" # ghcup-env
#[ -f "/Users/derek/.ghcup/env" ] && source "/Users/derek/.ghcup/env" # ghcup-env
[ -f "/Users/derek/.ghcup/env" ] && source "/Users/derek/.ghcup/env" # ghcup-env

export PATH=$PATH:/Applications/Araxis\ Merge.app/Contents/Utilities

export ANDROID_HOME=~/Library/Android/sdk
export PATH=$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH


# JDK
function setjdk() {
  if [ $# -ne 0 ]; then
   removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
   if [ -n "${JAVA_HOME+x}" ]; then
    removeFromPath $JAVA_HOME
   fi
   export JAVA_HOME=`/usr/libexec/java_home -v $@`
   export PATH=$JAVA_HOME/bin:$PATH
  fi
}

function removeFromPath() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}

# autojump
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh

# go proxy
export GOPROXY=https://goproxy.cn,https://goproxy.io
export GO111MODULE=""


export PATH=/usr/local/opt/libressl/bin:$PATH
export PATH="/usr/local/opt/sqlite/bin:$PATH"

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

## custom Programs, Completions, Scripts, Plugins, Services, Snippets, Themes
### Programs
# junegunn/fzf-bin
zinit ice from"gh-r" as"program"
zinit light junegunn/fzf-bin

# sharkdp/fd
zinit ice as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd"
zinit light sharkdp/fd

# sharkdp/bat
zinit ice as"command" from"gh-r" mv"bat* -> bat" pick"bat/bat"
zinit light sharkdp/bat

# ogham/exa, replacement for ls
zinit ice wait"2" lucid from"gh-r" as"program" mv"exa* -> exa"
zinit light ogham/exa

# # All of the above using the for-syntax and also z-a-bin-gem-node annex
# zinit wait"1" lucid from"gh-r" as"null" for \
#      sbin"fzf"          junegunn/fzf-bin \
#      sbin"**/fd"        @sharkdp/fd \
#      sbin"**/bat"       @sharkdp/bat \
#      sbin"exa* -> exa"  ogham/exa

zinit ice from"gh-r" as"program" mv"docker* -> docker-compose"
zinit light docker/compose

# jarun/nnn, a file browser, using the for-syntax
zinit pick"misc/quitcd/quitcd.zsh" sbin make light-mode for jarun/nnn

zinit ice as"program" atclone"rm -f src/auto/config.cache; ./configure" \
    atpull"%atclone" make pick"src/vim"
zinit light vim/vim

# zinit ice as"program" pick"$ZPFX/sdkman/bin/sdk" id-as'sdkman' run-atpull \
#   atclone"wget https://get.sdkman.io -O scr.sh; SDKMAN_DIR=$ZPFX/sdkman bash scr.sh" \
#   atpull"SDKMAN_DIR=$ZPFX/sdkman sdk selfupdate" \
#   atinit"export SDKMAN_DIR=$ZPFX/sdkman; source $ZPFX/sdkman/bin/sdkman-init.sh"
# zinit light zdharma/null

#zi ice as"program" atclone'bash install.sh' atpull'%atclone'
#zi light direnv/direnv

#zinit from"gh-r" as"program" mv"direnv* -> direnv" \
#    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
#    pick"direnv" src="zhook.zsh" for \
#        direnv/direnv

zinit ice from"gh-r" as"program" mv"shfmt* -> shfmt"
zinit light mvdan/sh

# zinit ice from"gh-r" as"program" mv"gotcha_* -> gotcha"
# zinit light b4b4r07/gotcha

zinit ice as"program" pick"yank" make
zinit light mptre/yank

zinit ice wait"2" lucid as'command' pick'src/vramsteg' \
    atclone'cmake .' atpull'%atclone' make  # use Turbo mode
zinit light z-shell/vramsteg-zsh

zinit ice atclone'PYENV_ROOT="$PWD" ./libexec/pyenv init - > zpyenv.zsh' \
    atinit'export PYENV_ROOT="$PWD"' atpull"%atclone" \
    as'command' pick'bin/pyenv' src"zpyenv.zsh" nocompile'!'
zinit light pyenv/pyenv

# zinit ice as"program" pick"$ZPFX/sdkman/bin/sdk" id-as'sdkman' run-atpull \
#   atclone"wget https://get.sdkman.io -O scr.sh; SDKMAN_DIR=$ZPFX/sdkman bash scr.sh" \
#   atpull"SDKMAN_DIR=$ZPFX/sdkman sdk selfupdate" \
#   atinit"export SDKMAN_DIR=$ZPFX/sdkman; source $ZPFX/sdkman/bin/sdkman-init.sh"
# zinit light zdharma/null

# asciinema
zinit ice as"command" wait lucid \
    atinit"export PYTHONPATH=$ZPFX/lib/python3.7/site-packages/" \
    atclone"PYTHONPATH=$ZPFX/lib/python3.7/site-packages/ \
    python3 setup.py --quiet install --prefix $ZPFX" \
    atpull'%atclone' test'0' \
    pick"$ZPFX/bin/asciinema"
zinit load asciinema/asciinema.git

# Installation of Rust compiler environment via the z-a-rust annex
zinit id-as"rust" wait=1 as=null sbin="bin/*" lucid rustup \
    atload="[[ ! -f ${ZINIT[COMPLETIONS_DIR]}/_cargo ]] && zi creinstall -q rust; \
    export CARGO_HOME=\$PWD; export RUSTUP_HOME=\$PWD/rustup" for \
        zdharma-continuum/null

### Completions
zinit ice as"completion"
zinit snippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker

### Scripts
# ogham/exa also uses the definitions
zinit ice wait"0c" lucid reset \
    atclone"local P=${${(M)OSTYPE:#*darwin*}:+g}
            \${P}sed -i \
            '/DIR/c\DIR 38;5;63;1' LS_COLORS; \
            \${P}dircolors -b LS_COLORS > c.zsh" \
    atpull'%atclone' pick"c.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light trapd00r/LS_COLORS

# revolver
zinit ice wait"2" lucid as"program" pick"revolver"
zinit light molovo/revolver

# zunit
zinit ice wait"2" lucid as"program" pick"zunit" \
            atclone"./build.zsh" atpull"%atclone"
zinit load molovo/zunit

zinit ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX" nocompile
zinit light tj/git-extras

zinit ice as"program" atclone'perl Makefile.PL PREFIX=$ZPFX' \
    atpull'%atclone' make'install' pick"$ZPFX/bin/git-cal"
zinit light k4rthik/git-cal

zinit ice as"program" id-as"git-unique" pick"git-unique"
zinit snippet https://github.com/Osse/git-scripts/blob/master/git-unique

zinit ice as"program" cp"wd.sh -> wd" mv"_wd.sh -> _wd" \
    atpull'!git reset --hard' pick"wd"
zinit light mfaerevaag/wd

zinit ice as"program" pick"bin/archey"
zinit load obihann/archey-osx

### Plugins
zinit ice pick"h.sh"
zinit light paoloantinori/hhighlighter

# zsh-tag-search; after ^G, prepend with "/" for the regular search
#zinit ice wait lucid bindmap"^R -> ^G"
#zinit light -b zdharma-continuum/zsh-tag-search

# forgit
zinit ice wait lucid
zinit load 'wfxr/forgit'

# diff-so-fancy
zinit ice wait"2" lucid as"program" pick"bin/git-dsf"
zinit load zdharma-continuum/zsh-diff-so-fancy

# zsh-startify, a vim-startify like plugin
zinit ice wait"0b" lucid atload"zsh-startify"
zinit load zdharma-continuum/zsh-startify

# declare-zsh
zinit ice wait"2" lucid
zinit load zdharma-continuum/declare-zsh

# fzf-marks
zinit ice wait lucid
zinit load urbainvaes/fzf-marks

# zsh-autopair
zinit ice wait lucid
zinit load hlissner/zsh-autopair

zinit ice wait"1" lucid
zinit load psprint/zsh-navigation-tools

# zdharma-continuum/history-search-multi-word
zstyle ":history-search-multi-word" page-size "11"
zinit ice wait"1" lucid
zinit load zdharma-continuum/history-search-multi-word

# ZUI and Crasis
zinit ice wait"1" lucid
zinit load zdharma-continuum/zui

zinit ice wait'[[ -n ${ZLAST_COMMANDS[(r)cra*]} ]]' lucid
zinit load zdharma-continuum/zinit-crasis

# Gitignore plugin – commands gii and gi
zinit ice wait"2" lucid
zinit load voronkovich/gitignore.plugin.zsh

# Autosuggestions & fast-syntax-highlighting
zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions

# F-Sy-H automatic per-directory themes plugin – available for patrons:
# https://patreon.com/psprint
#zinit ice wait"1" lucid from"psprint@gitlab.com"
#zinit load psprint/fsh-auto-themes

# # zredis together with some binding/tying
# # – defines the variable $rdhash
# zstyle ":plugin:zredis" configure_opts "--without-tcsetpgrp"
# zstyle ":plugin:zredis" cflags  "-Wall -O2 -g -Wno-unused-but-set-variable"
# zinit ice wait"1" lucid \
#     atload'ztie -d db/redis -a 127.0.0.1:4815/5 -zSL main rdhash'
# zinit load zdharma-continuum/zredis

# Github-Issue-Tracker – the notifier thread
# zinit ice lucid id-as"GitHub-notify" \
#         on-update-of'~/.cache/zsh-github-issues/new_titles.log' \
#         notify'New issue: $NOTIFY_MESSAGE'
# zinit light zdharma-continuum/zsh-github-issues

### Services
# # a service that runs the redis database, in background, single instance
# zinit ice wait"1" lucid service"redis"
# zinit light zdharma-continuum/zservices-redis

# Github-Issue-Tracker – the issue-puller thread
# GIT_SLEEP_TIME=700
# GIT_PROJECTS=zdharma-continuum/zsh-github-issues:zdharma/zinit
#
# zinit ice wait"2" lucid service"GIT" pick"zsh-github-issues.service.zsh"
# zinit light zdharma-continuum/zsh-github-issues

### Snippets
# zinit ice svn pick"completion.zsh" src"git.zsh"
# zinit snippet OMZ::lib

#zinit ice svn wait"0" lucid atinit"local ZSH=\$PWD" \
#    atclone"mkdir -p plugins; cd plugins; ln -sfn ../. osx"
#zinit snippet https://github.com/ohmyzsh/tree/master/plugins/osx

# Or with most recent Zinit and with ~/.zinit/snippets
# directory pruned (rm -rf -- ${ZPLGM[SNIPPETS_DIR]}):
# zinit ice svn
# zinit snippet OMZ::plugins/osx

### Themes
GEOMETRY_COLOR_DIR=152
zinit ice wait"0" lucid atload"geometry::prompt"
zinit light geometry-zsh/geometry

zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure

# zinit light mafredri/zsh-async  # dependency
# zinit ice svn silent atload'prompt sorin'
# zinit snippet PZT::modules/prompt

# zinit ice atload"fpath+=( \$PWD );"
# zinit light chauncey-garrett/zsh-prompt-garrett
# zinit ice svn atload"prompt garrett" silent
# zinit snippet PZT::modules/prompt

zinit ice wait'!' lucid nocompletions \
         compile"{zinc_functions/*,segments/*,zinc.zsh}" \
         atload'!prompt_zinc_setup; prompt_zinc_precmd'
zinit load robobenklein/zinc

# ZINC git info is already async, but if you want it
# even faster with gitstatus in Turbo mode:
# https://github.com/romkatv/gitstatus
zinit ice wait'1' atload'zinc_optional_depenency_loaded'
zinit load romkatv/gitstatus

# After finishing the configuration wizard change the atload'' ice to:
# -> atload'source ~/.p10k.zsh; _p9k_precmd'
zinit ice wait'0' lucid atload'true; _p9k_precmd' nocd
zinit light romkatv/powerlevel10k

# # # Load powerlevel10k theme
# # zi ice depth"1" # git clone depth
# # zi light romkatv/powerlevel10k
#
# # # Load pure theme
# zi ice pick"async.zsh" src"pure.zsh"  # zsh-async library that's bundled with it.
# zi light sindresorhus/pure
#
# # Load starship theme
# # line 1: `starship` binary as command, from github release
# # line 2: starship setup at clone(create init.zsh, completion)
# # line 3: pull behavior same as clone, source init.zsh
# # zinit ice as"command" from"gh-r" \
# #           atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
# #           atpull"%atclone" src"init.zsh"
# # zinit light starship/starship
#
#
# # A glance at the new for-syntax - load all of plugins with a single command. For more information see:
# # https://zdharma-continuum.github.io/zinit/wiki/For-Syntax/
# zinit for \
#   light-mode \
#   zsh-users/zsh-autosuggestions \
#   light-mode \
#   zdharma-continuum/fast-syntax-highlighting \
#   zdharma-continuum/history-search-multi-word \
#   light-mode \
#   zsh-users/zsh-syntax-highlighting
#
# zi ice blockf
# zi light zsh-users/zsh-completions
#
# # Binary release in archive, from Github-release page.
# # After automatic unpacking it provides program "fzf".
# zi ice from"gh-r" as"program"
# zi light junegunn/fzf
#
# # One other binary release, it needs renaming from `docker-compose-Linux-x86_64`.
# # This is done by ice-mod `mv'{from} -> {to}'. There are multiple packages per
# # single version, for OS X, Linux and Windows – so ice-mod `bpick' is used to
# # select Linux package – in this case this is actually not needed, Zinit will
# # grep operating system name and architecture automatically when there's no `bpick'.
# zi ice from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*Darwin*"
# zi load docker/compose
#
# # For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# # coreutils package from Homebrew; you can also use https://github.com/ogham/exa)
# zi ice atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
# zi light trapd00r/LS_COLORS
#
# # asdf
# zi light asdf-vm/asdf
#
# # make'!...' -> run make before atclone & atpull
# zi ice as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' \
#   atpull'%atclone' src"zhook.zsh" for \
#  light-mode direnv/direnv
### End of Zinit's installer chunk

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# * PROMPTS
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#     source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# [ -x $(command -v starship) ] && eval "$(starship init zsh)"


# * APPS
#[ -x $(command -v direnv) ] && eval "$(direnv hook zsh)"
[ -x $(command -v asdf) ] && . $HOME/.asdf/asdf.sh
# [ -x $(command -v kubectl) ] && source <(kubectl completion zsh)
# if [ -x $(command -v eksctl) ]; then
#     mkdir -p ~/.zsh/completion/
#     eksctl completion zsh > ~/.zsh/completion/_eksctl
# fi
