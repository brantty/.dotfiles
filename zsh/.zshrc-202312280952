[[ -f ~/.profile ]] && source ~/.profile

# source your own zsh file if exists
[[ -f ~/.config/.zsh.sh ]] && source ~/.config/.zsh.sh

# Command completion
autoload -Uz compinit promptinit
autoload -U colors && colors  # Load colors

# Smart URLs.
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

compinit
promptinit

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### zinit manual install
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

#####################
# PROMPT            #
#####################
zinit ice from"gh-r" as"command" atload'eval "$(starship init zsh)"'
zinit load starship/starship


# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

# oh-my-zsh
function omzPlugin() {
  zinit ice svn lucid $2
  zinit snippet OMZP::$1
}

function omzLib () {
  zinit wait'!' lucid for OMZL::$1
}

##########################
# OMZ Libs and Plugins   #
##########################

# IMPORTANT:
# Ohmyzsh plugins and libs are loaded first as some these sets some defaults which are required later on.
# Otherwise something will look messed up
# ie. some settings help zsh-autosuggestions to clear after tab completion

setopt promptsubst

# Loading tmux first, to prevent jumps when tmux is loaded after .zshrc
# It will only be loaded on first start
zinit wait lucid for \
    OMZL::clipboard.zsh \
    OMZL::compfix.zsh \
    OMZL::completion.zsh \
    OMZL::correction.zsh \
    atload"
        alias ..='cd ..'
        alias …='cd ../..'
        alias ….='cd ../../..'
        alias …..='cd ../../../..'
    " \
    OMZL::directories.zsh \
    OMZL::git.zsh \
    OMZL::grep.zsh \
    OMZL::history.zsh \
    OMZL::key-bindings.zsh \
    OMZL::spectrum.zsh \
    atload"
        alias gcd='gco dev'
    " \
    OMZP::git \
    atload"
        alias dcupb='docker-compose up –build'
    " \
    OMZP::docker-compose \
    djui/alias-tips \
    # hlissner/zsh-autopair \
    # chriskempson/base16-shell \

if [[ `uname` == "Darwin" ]]; then
  omzPlugin macos
fi

#####################
# PLUGINS           #
#####################
# @source: https://github.com/crivotz/dot_files/blob/master/linux/zplugin/zshrc

# IMPORTANT:
# These plugins should be loaded after ohmyzsh plugins

zinit wait lucid for \
        zsh-users/zsh-history-substring-search \
    light-mode atinit"ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20" atload"!_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions \
    light-mode atinit"typeset -gA FAST_HIGHLIGHT; FAST_HIGHLIGHT[git-cmsg-len]=100; zpcompinit; zpcdreplay" \
        zdharma-continuum/fast-syntax-highlighting \
    light-mode blockf atpull'zinit creinstall -q .' \
    atinit"
        zstyle ':completion:*' completer _expand _complete _ignored _approximate
        zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
        zstyle ':completion:*' menu select=2
        zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
        zstyle ':completion:*:descriptions' format '– %d –'
        zstyle ':completion:*:processes' command 'ps -au$USER'
        zstyle ':completion:complete:*:options' sort false
        zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,user,comm,cmd -w -w'
    " \
        zsh-users/zsh-completions \
    bindmap"^R -> ^H" atinit"
        zstyle :history-search-multi-word page-size 10
        zstyle :history-search-multi-word highlight-color fg=red,bold
        zstyle :plugin:history-search-multi-word reset-prompt-protect 1
    " \
        zdharma-continuum/history-search-multi-word \
    reset \
    atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"c.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”' \
        trapd00r/LS_COLORS \
    atinit"zicompinit; zicdreplay" \
        z-shell/F-Sy-H
zinit wait="0" lucid light-mode for \
    hlissner/zsh-autopair \
    hchbaw/zce.zsh \
    wfxr/forgit

# 快速目录跳转
zinit ice lucid wait='1'
zinit light skywind3000/z.lua
zinit light Aloxaf/fzf-tab

# git-extras
zinit ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX"
zinit light tj/git-extras

# navi
zinit ice wait"1" lucid
zinit light denisidoro/navi

# thefuck
zinit ice wait"1" lucid
zinit light laggardkernel/zsh-thefuck

# sharkdp/fd
zinit ice as"command" from"gh-r" mv"fd*/fd -> fd" pick"fd"
zinit light sharkdp/fd

# sharkdp/bat
zinit ice as"command" from"gh-r" mv"bat*/bat -> bat" pick"bat"
zinit light sharkdp/bat

# ogham/exa, replacement for ls
# zinit ice wait"2" lucid from"gh-r" as"program" mv"bin/exa* -> exa"
zinit ice as"command" from"gh-r" mv"exa* -> exa" pick"bin/exa"
zinit light ogham/exa

# # BurntSushi/ripgrep
zi for \
    from'gh-r' \
    sbin'**/rg -> rg' \
  BurntSushi/ripgrep

# junegunn/fzf-bin
zi for \
    from'gh-r' \
    sbin'fzf' \
  junegunn/fzf \
  https://github.com/junegunn/fzf/raw/master/shell/{"completion","key-bindings"}.zsh

# gh, git-mkver, git-sizer
zi from"gh-r" for \
    sbin"**/gh" \
  cli/cli \
    sbin"**/git-mkver" \
  idc101/git-mkver \
    sbin"git-sizer" \
  @github/git-sizer \
    sbin"**/lazygit" \
  jesseduffield/lazygit

# glow
zi for \
    from"gh-r" \
    sbin"**/glow" \
  charmbracelet/glow

# b4b4r07/httpstat
zinit ice as"program" mv"httpstat.sh -> httpstat" \
    pick"httpstat" atpull'!git reset --hard'
zinit light b4b4r07/httpstat

#derailed/k9s
zinit ice as"command" from"gh-r" mv"k9s* -> k9s" pick"derailed/k9s"
zinit light derailed/k9s

#sharkdp/hyperfine 命令行基准测试工具
zinit ice as"command" from"gh-r" mv"hyperfine*/hyperfine -> hyperfine" pick"sharkdp/hyperfine"
zinit light sharkdp/hyperfine

#dbrgn/tealdeer
zinit ice as"command" from"gh-r" mv"tealdeer* -> tldr" pick"dbrgn/tealdeer"
zinit light dbrgn/tealdeer

#chmln/sd sed 查找和替换
zinit ice as"command" from"gh-r" mv"sd* -> sd" pick"sd"
zinit light chmln/sd

#dandavison/delta git diff
zinit ice as"command" from"gh-r" mv"delta* -> delta" pick"delta"
zinit light dandavison/delta

# ogham/dog dns
zinit ice as"command" from"gh-r" mv"bin/dog* -> dog" pick"bin/dog"
zinit light ogham/dog

# knqyf263/pet 命令描述,按描述查找
zinit ice as"command" from"gh-r" pick"pet"
zinit light knqyf263/pet

# alexellis/arkade k8s应用管理
zinit ice as"command" from"gh-r" mv"arkade* -> arkade" pick"arkade"
zinit light alexellis/arkade

# atuinsh/atuin 历史命令管理
zinit ice as"command" from"gh-r" mv"atuin* -> atuin" pick"atuin"
zinit light atuinsh/atuin

# akavel/up 交互式管道工具
zinit ice as"command" from"gh-r" mv"up* -> up" pick"up"
zinit light akavel/up

# helix-editor/helix 终端文本编辑工具 体积很大
zinit ice as"command" from"gh-r" mv"helix*/hx -> hx" pick"helix/hx"
zinit light helix-editor/helix 

# djui/alias-tips 别名提醒
zinit load djui/alias-tips

# jq
# zi for \
#     from'gh-r' \
#     sbin'* -> jq' \
#     nocompile \
#   @jqlang/jq
zi for \
    atclone'autoreconf -fi \
      && ./configure --with-oniguruma=builtin \
      && make \
      && ln -sfv $PWD/jq.1 $ZPFX/man/man1' \
    as'null' \
    from'gh-r' \
    if'[[ -n "$commands[jq]" ]]' \
    sbin'jq' \
  jqlang/jq

# tmux
# zinit for \
#     configure'--disable-utf8proc --prefix=$PWD --quiet' \
#     make'PREFIX=$PWD --quiet install' \
#     null \
#     sbin \
#   @tmux/tmux
zinit for \
    as'null' \
    configure'--disable-utf8proc --prefix=$PWD --quiet' \
    make"PREFIX=$PWD --quiet install" \
    sbin \
  @tmux/tmux

# neovim
zinit for \
    from'gh-r' \
    sbin'**/nvim -> nvim' \
    ver'nightly' \
  neovim/neovim

# shfmt
zi for \
    from'gh-r' \
    sbin'**/sh* -> shfmt' \
  @mvdan/sh

# tokei
zi for \
    from'gh-r' \
    sbin'**/tokei -> tokei' \
  XAMPPRocky/tokei

# Homebrew
# zi for \
#     as'null' \
#     atclone'%atpull' \
#     atpull'./bin/brew update --preinstall \
#       && ln -sf $PWD/completions/zsh/_brew $ZINIT[COMPLETIONS_DIR] \
#       && rm -f brew.zsh \
#       && ./bin/brew shellenv --dummy-arg > brew.zsh \
#       && zcompile brew.zsh' \
#     depth'3' \
#     nocompletions \
#     sbin'bin/brew' \
#     src'brew.zsh' \
#   homebrew/brew

# sdkman
zinit ice as"program" pick"$ZPFX/sdkman/bin/sdk" id-as'sdkman' run-atpull \
  atclone"curl https://get.sdkman.io -o scr.sh; SDKMAN_DIR=$ZPFX/sdkman bash scr.sh" \
  atpull"SDKMAN_DIR=$ZPFX/sdkman sdk selfupdate" \
  atinit"export SDKMAN_DIR=$ZPFX/sdkman; source $ZPFX/sdkman/bin/sdkman-init.sh"
zinit light zdharma-continuum/null

# asdf
# zinit lucid wait for \
#     id-as"asdf" \
#     atload"source ${ZINIT[PLUGINS_DIR]}/asdf*/asdf.sh; zicompinit; zicdreplay" \
#     light-mode \
#   @asdf-vm/asdf
zinit ice id-as"asdf" atload"source ${ZINIT[PLUGINS_DIR]}/asdf*/asdf.sh" completions
zinit light asdf-vm/asdf

# Load powerlevel10k theme
zinit ice depth"1" # git clone depth
zinit light romkatv/powerlevel10k

# Load pure theme
zinit ice pick"async.zsh" src"pure.zsh" # with zsh-async library that's bundled with it.
zinit light sindresorhus/pure

# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# # History search
# autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
# zle -N up-line-or-beginning-search
# zle -N down-line-or-beginning-search
# [[ -n "${key[Up]}" ]] && bindkey -- "${key[Up]}" up-line-or-beginning-search
# [[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search


#####################
# HISTORY           #
#####################
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=290000
SAVEHIST=$HISTSIZE

#####################
# SETOPT            #
#####################
set -o emacs
setopt vi
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_all_dups   # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data
setopt always_to_end          # cursor moved to the end in full completion
setopt hash_list_all          # hash everything before completion
setopt completealiases        # complete alisases
setopt always_to_end          # when completing from the middle of a word, move the cursor to the end of the word
setopt complete_in_word       # allow completion from within a word/phrase
setopt nocorrect              # spelling correction for commands
setopt list_ambiguous         # complete as much of a completion until it gets ambiguous.
setopt nolisttypes
setopt listpacked
setopt automenu
setopt autocd

setopt globdots               # Glob Dotfiles As Well.
setopt extendedglob           # Use Extending Globbing.

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# zstyle ':completion:*' menu select

# source your own shrc file if exists
[[ -f ~/.config/.env.sh ]] && source ~/.config/.env.sh

# source your own alias file if exists
[[ -f ~/.config/.alias.sh ]] && source ~/.config/.alias.sh

# source your own function file if exists
[[ -f ~/.config/.fun.sh ]] && source ~/.config/.fun.sh

# source your proxy shrc file if exists
[[ -f ~/.config/.proxy.sh ]] && source ~/.config/.proxy.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# 补全快捷键重设
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey ',' autosuggest-accept


### End of Zinit's installer chunk
source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"
